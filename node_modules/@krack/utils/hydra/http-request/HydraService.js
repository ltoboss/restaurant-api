"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class HydraService {
    constructor(hydra) {
        this.makeHydraHTTPRequest = (serviceName, method, path, body = {}, headers = {}) => __awaiter(this, void 0, void 0, function* () {
            const thisServiceName = this.hydra.isService ? this.hydra.getServiceName() : 'none';
            const thisServiceIntanceID = this.hydra.isService ? this.hydra.getInstanceID() : 'none';
            const message = this.hydra.createUMFMessage({
                headers,
                body,
                to: `${serviceName}:[${method}]${path}`,
                from: `${thisServiceName}:${thisServiceIntanceID}`,
                fallbackToQueue: true,
            });
            return this.hydra.makeAPIRequest(message);
        });
        this.hydra = hydra;
    }
}
exports.HydraService = HydraService;
exports.default = HydraService;
//# sourceMappingURL=HydraService.js.map