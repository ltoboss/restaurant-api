"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_request_1 = require("../../hydra/http-request");
const oauth2_server_1 = __importDefault(require("oauth2-server"));
const InvalidTokenError_1 = __importDefault(require("../../error/InvalidTokenError"));
const Request = oauth2_server_1.default.Request;
const Response = oauth2_server_1.default.Response;
const DEFAULT_AUTH_SERVICE_NAME = 'krack-auth';
class OAuth2Middleware {
    constructor(hydra) {
        this.authenticateRequest = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            let user;
            try {
                user = yield this.authenticateRequestThroughHydra(req);
                if (!user) {
                    return next(new InvalidTokenError_1.default());
                }
                req.user = user;
                return next();
            }
            catch (error) {
                error.code = 401;
                return next(error);
            }
        });
        this.authenticateRequestThroughHydra = (req) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.hydraService.makeHydraHTTPRequest(this.authService, http_request_1.HTTPRequestMethod.GET, '/api/profile', undefined, req.headers);
            return response.data;
        });
        this.hydraService = new http_request_1.HydraService(hydra);
        this.authService = process.env.AUTH_SERVICE || DEFAULT_AUTH_SERVICE_NAME;
    }
}
exports.OAuth2Middleware = OAuth2Middleware;
exports.default = OAuth2Middleware;
//# sourceMappingURL=OAuth2Middleware.js.map